# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "admin"}, {"type": "address[]", "name": "members"}], "name": "create_group", "returns": {"type": "uint64"}, "events": [{"args": [{"type": "uint64", "name": "group_id"}], "name": "GroupCreated"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "group_id"}, {"type": "address", "name": "payer"}, {"type": "uint64", "name": "total_amount"}, {"type": "(address,uint64)[]", "name": "debtors"}, {"type": "string", "name": "memo"}, {"type": "(uint64,address,uint64,uint64,uint64)[]", "name": "payers_debt"}], "name": "create_bill", "returns": {"type": "uint64"}, "events": [{"args": [{"type": "(uint64,uint64)", "name": "bill_key", "struct": "BillKey"}], "name": "BillChanged"}], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "group_id"}, {"type": "uint64", "name": "bill_id"}, {"type": "uint64", "name": "sender_index"}, {"type": "pay", "name": "payment"}], "name": "settle_bill", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Splitrix", "state": {"keys": {"box": {}, "global": {"group_counter": {"key": "Z3JvdXBfY291bnRlcg==", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"groups": {"keyType": "uint64", "valueType": "Group", "prefix": "Z3JvdXBz"}, "bills": {"keyType": "BillKey", "valueType": "Bill", "prefix": "YmlsbHM="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 1}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"Bill": [{"name": "payer", "type": "address"}, {"name": "total_amount", "type": "uint64"}, {"name": "debtors", "type": "(address,uint64,uint64)[]"}, {"name": "memo", "type": "string"}], "BillKey": [{"name": "group_id", "type": "uint64"}, {"name": "bill_id", "type": "uint64"}], "Group": [{"name": "admin", "type": "address"}, {"name": "bill_counter", "type": "uint64"}, {"name": "members", "type": "address[]"}]}, "byteCode": {"approval": "CiAEAAEwICYGDWdyb3VwX2NvdW50ZXIIAAAAAAAAAAAFYmlsbHMEFR98dQZncm91cHMEd5QKuDEYQAADKCJnMRtBAHWCAwRxgAI1BCZ6Yv4Eq19qEzYaAI4DAEMAIQACIkMxGRREMRhENhoBNhoCNhoDMRYjCUk4ECMSRIgD7SNDMRkURDEYRDYaATYaAjYaAzYaBDYaBTYaBogA9CtMULAjQzEZFEQxGEQ2GgE2GgKIABErTFCwI0MxGUD/ojEYFEQjQ4oCASJJgABJIihlTElPAkQjCChMZ4ACAAGL/lCL/yJZIosHiwYMQQBwi/9XAgCLByULJVhJjAAyAxOLBYwBQQA+iwUiWYwCIowDiwOLAgxBAEOLBVcCAIsDJQslWIsAEkEAKSOLBYwBQAAUiwVXAgCLAFBJFSUKFlcGAkxQjAGLAYwFiwcjCIwHQv+ViwMjCIwDQv+1IkL/y4sFSSJZIw1Ei/4yAxNEi/4pUIACACpQTFCLBBYnBEsBUEm8SE8Cv4AEl0ru6ksBULCMAImKBgEiRwWAAEcEi/oXFicETFBHAr1FAUSL+zIDE0SL/CmlRIv9IllJTgJEi/4VRL5MSU8CRFcgCIACAAAiixCLDAxBALGL/VcCAIsQgSgLgShYSYwBVwAgSYwCMgMTiw+MA0EAVosPIlmMByKMBosGiwcMQQB8iw9XAgCLBiQLJFhXACCLAhJBAF8jiw+MA0AAKYsCi/sTQQAuiw9XAgCLAVcgCIsCTFApUFBJFSQKFlcGAkxQjA+LD4wDiwOMD4sQIwiMEEL/dYsPVwIAiwFXIAiLAksBUExQUEkVJAoWVwYCTFCMD0L/zosGIwiMBkL/fCJC/5WLDyJZSYwIRCKMCiKMEIsQiwgMQQAciw9XAgCLEElOAiQLJFglW4sKCIwKIwiMEEL/3IsKFov8qESL+osOUEmMBYv7i/xQgAIALFCLD0lOAhWBLAgWVwYCUExQi/5QKk8CUEmMAEm8SElPAr+LDUklWyMIFlwgiwtJvEhMv75MjAREi/8iWYwJIowQixCLCQxBAT+L/1cCAIsQSU4CgUALgUBYSVcACIv6TFAqSwFQSb1FAURJvkRJVwAgSwRXCCBMSwESREsEgShbSwKBKFlLA4EqWUsESwJLAlJJIllLBA1ESVcCAE8EJAtMSwEkWEsJJFtLASVbSwKBKFtMSwEJSwIPREsBCBZPAkxcKE8CgQIITwNMTwJdSwUiSwVYSwYVTwdLBU8CUkxLAlBMUE8DTwQJTwIVSwKBKlkITAkWVwYCXCpLA7xITwNMvycFTwNQsE8CgThbiwRJgShZSwGBKllLAksCSwJSSSJZSwUNRElXAgBPBSQLTEsBJFhJVwAgTwgSREmBKFtPBwhLASVbSwEPRBZcKEyBAghMXUsDIksEWEsEFU8FSwRPAlJMSwJQTFBPAk8DCU8CFUsCgSpZCEwJFlcGAlwqjAQjCIwQQv65iwBJvEiLBL8nBYsFULCLDowAiYoEAIv8i/1QKkxQRwK9RQFEvkxJTwJEi/84B0sBVwAgEkSL/hdLAYEoWUlOAk4DSwKBKllJTgRPA08DTwJSSU4CSSJZSwINRFcCAEwkC0lOAiRYRwJXACCL/zgAEkRJJVtMgShbSU4CCUcCRIv/OAhJTwINQQAEiwiMCYsHiwkIFosGTFwoiwWBAgiLBExPAl2LAUkiiwJJTgVYSwEVTwKLA0lOBE8CUkxLA1BMUExPAwlPAhVLAoEqWQhMCRZXBgJcKosASbxITL+J", "clear": "CoEBQw=="}, "events": [{"args": [{"type": "uint64", "name": "group_id"}], "name": "GroupCreated"}, {"args": [{"type": "(uint64,uint64)", "name": "bill_key", "struct": "BillKey"}], "name": "BillChanged"}], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [362], "errorMessage": "Admin must be provided"}, {"pc": [443], "errorMessage": "At least one debtor must be provided"}, {"pc": [654], "errorMessage": "At least one valid debtor must be provided"}, {"pc": [356], "errorMessage": "At least two members must be provided"}, {"pc": [1148], "errorMessage": "Bill does not exist"}, {"pc": [843], "errorMessage": "Bill payer mismatch"}, {"pc": [1050], "errorMessage": "Cutoff exceeds new bill obligation"}, {"pc": [906], "errorMessage": "Cutoff exceeds pending debt"}, {"pc": [1239], "errorMessage": "Debt already paid"}, {"pc": [424], "errorMessage": "Group does not exist"}, {"pc": [247, 288, 454, 482, 486, 529, 530, 562, 608, 682, 809, 811, 831, 836, 885, 1027, 1029, 1161, 1214, 1217], "errorMessage": "Index access is out of bounds"}, {"pc": [872, 1014], "errorMessage": "Invalid debtor index"}, {"pc": [447], "errorMessage": "Memo must be provided"}, {"pc": [1035], "errorMessage": "New bill does not contain the payer from netting"}, {"pc": [101, 132, 166], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [430], "errorMessage": "Payer must be provided"}, {"pc": [1165], "errorMessage": "Payment must be sent to the payer"}, {"pc": [826], "errorMessage": "Referenced bill does not exist"}, {"pc": [1203], "errorMessage": "Sender index is out of bounds"}, {"pc": [1225], "errorMessage": "Sender is not a debtor for this bill"}, {"pc": [703], "errorMessage": "Total amount does not match the sum of the debtors' amounts"}, {"pc": [435], "errorMessage": "Total amount must be greater than 0"}, {"pc": [193], "errorMessage": "can only call when creating"}, {"pc": [104, 135, 169], "errorMessage": "can only call when not creating"}, {"pc": [776, 829, 1154], "errorMessage": "check self.bills entry exists"}, {"pc": [211], "errorMessage": "check self.group_counter exists"}, {"pc": [453], "errorMessage": "check self.groups entry exists"}, {"pc": [123], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class Bill:
    """Struct for Bill"""
    payer: str
    total_amount: int
    debtors: list[tuple[str, int, int]]
    memo: str

@dataclasses.dataclass(frozen=True)
class BillKey:
    """Struct for BillKey"""
    group_id: int
    bill_id: int

@dataclasses.dataclass(frozen=True)
class Group:
    """Struct for Group"""
    admin: str
    bill_counter: int
    members: list[str]


@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateGroupArgs:
    """Dataclass for create_group arguments"""
    admin: str
    members: list[str]

    @property
    def abi_method_signature(self) -> str:
        return "create_group(address,address[])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateBillArgs:
    """Dataclass for create_bill arguments"""
    group_id: int
    payer: str
    total_amount: int
    debtors: list[tuple[str, int]]
    memo: str
    payers_debt: list[tuple[int, str, int, int, int]]

    @property
    def abi_method_signature(self) -> str:
        return "create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SettleBillArgs:
    """Dataclass for settle_bill arguments"""
    group_id: int
    bill_id: int
    sender_index: int
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "settle_bill(uint64,uint64,uint64,pay)void"


class SplitrixParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_group(
        self,
        args: tuple[str, list[str]] | CreateGroupArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_group(address,address[])uint64",
            "args": method_args,
        }))

    def create_bill(
        self,
        args: tuple[int, str, int, list[tuple[str, int]], str, list[tuple[int, str, int, int, int]]] | CreateBillArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64",
            "args": method_args,
        }))

    def settle_bill(
        self,
        args: tuple[int, int, int, algokit_utils.AppMethodCallTransactionArgument] | SettleBillArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "settle_bill(uint64,uint64,uint64,pay)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class SplitrixCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_group(
        self,
        args: tuple[str, list[str]] | CreateGroupArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_group(address,address[])uint64",
            "args": method_args,
        }))

    def create_bill(
        self,
        args: tuple[int, str, int, list[tuple[str, int]], str, list[tuple[int, str, int, int, int]]] | CreateBillArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64",
            "args": method_args,
        }))

    def settle_bill(
        self,
        args: tuple[int, int, int, algokit_utils.AppMethodCallTransactionArgument] | SettleBillArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "settle_bill(uint64,uint64,uint64,pay)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class SplitrixSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_group(
        self,
        args: tuple[str, list[str]] | CreateGroupArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_group(address,address[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def create_bill(
        self,
        args: tuple[int, str, int, list[tuple[str, int]], str, list[tuple[int, str, int, int, int]]] | CreateBillArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def settle_bill(
        self,
        args: tuple[int, int, int, algokit_utils.AppMethodCallTransactionArgument] | SettleBillArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "settle_bill(uint64,uint64,uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    group_counter: int

class SplitrixState:
    """Methods to access state for the current Splitrix app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def group_counter(self) -> int:
        """Get the current value of the group_counter key in global_state state"""
        value = self.app_client.state.global_state.get_value("group_counter")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "Group": Group,
            "Bill": Bill
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def groups(self) -> "_MapState[int, Group]":
        """Get values from the groups map in box state"""
        return _MapState(
            self.app_client.state.box,
            "groups",
            self._struct_classes.get("Group")
        )

    @property
    def bills(self) -> "_MapState[BillKey, Bill]":
        """Get values from the bills map in box state"""
        return _MapState(
            self.app_client.state.box,
            "bills",
            self._struct_classes.get("Bill")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class SplitrixClient:
    """Client for interacting with Splitrix smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = SplitrixParams(self.app_client)
        self.create_transaction = SplitrixCreateTransactionParams(self.app_client)
        self.send = SplitrixSend(self.app_client)
        self.state = SplitrixState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "SplitrixClient":
        return SplitrixClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SplitrixClient":
        return SplitrixClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "SplitrixClient":
        return SplitrixClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "SplitrixComposer":
        return SplitrixComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_group(address,address[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["settle_bill(uint64,uint64,uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class SplitrixBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating Splitrix contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class SplitrixFactory(algokit_utils.TypedAppFactoryProtocol[SplitrixBareCallCreateParams, None, None]):
    """Factory for deploying and managing SplitrixClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = SplitrixFactoryParams(self.app_factory)
        self.create_transaction = SplitrixFactoryCreateTransaction(self.app_factory)
        self.send = SplitrixFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: SplitrixBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[SplitrixClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return SplitrixClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SplitrixClient:
        """Get an app client by creator address and name"""
        return SplitrixClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> SplitrixClient:
        """Get an app client by app ID"""
        return SplitrixClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class SplitrixFactoryParams:
    """Parameters for creating transactions for Splitrix contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SplitrixFactoryCreateParams(app_factory)
        self.update = SplitrixFactoryUpdateParams(app_factory)
        self.delete = SplitrixFactoryDeleteParams(app_factory)

class SplitrixFactoryCreateParams:
    """Parameters for 'create' operations of Splitrix contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def create_group(
        self,
        args: tuple[str, list[str]] | CreateGroupArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_group(address,address[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_group(address,address[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_bill(
        self,
        args: tuple[int, str, int, list[tuple[str, int]], str, list[tuple[int, str, int, int, int]]] | CreateBillArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def settle_bill(
        self,
        args: tuple[int, int, int, algokit_utils.AppMethodCallTransactionArgument] | SettleBillArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the settle_bill(uint64,uint64,uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "settle_bill(uint64,uint64,uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class SplitrixFactoryUpdateParams:
    """Parameters for 'update' operations of Splitrix contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class SplitrixFactoryDeleteParams:
    """Parameters for 'delete' operations of Splitrix contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class SplitrixFactoryCreateTransaction:
    """Create transactions for Splitrix contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SplitrixFactoryCreateTransactionCreate(app_factory)


class SplitrixFactoryCreateTransactionCreate:
    """Create new instances of Splitrix contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class SplitrixFactorySend:
    """Send calls to Splitrix contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = SplitrixFactorySendCreate(app_factory)


class SplitrixFactorySendCreate:
    """Send create calls to Splitrix contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[SplitrixClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return SplitrixClient(result[0]), result[1]


class SplitrixComposer:
    """Composer for creating transaction groups for Splitrix contract calls"""

    def __init__(self, client: "SplitrixClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def create_group(
        self,
        args: tuple[str, list[str]] | CreateGroupArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SplitrixComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_group(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_group(address,address[])uint64", v
            )
        )
        return self

    def create_bill(
        self,
        args: tuple[int, str, int, list[tuple[str, int]], str, list[tuple[int, str, int, int, int]]] | CreateBillArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SplitrixComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_bill(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64", v
            )
        )
        return self

    def settle_bill(
        self,
        args: tuple[int, int, int, algokit_utils.AppMethodCallTransactionArgument] | SettleBillArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "SplitrixComposer":
        self._composer.add_app_call_method_call(
            self.client.params.settle_bill(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "settle_bill(uint64,uint64,uint64,pay)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "SplitrixComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "SplitrixComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
