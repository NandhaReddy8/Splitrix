/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Splitrix","structs":{"Bill":[{"name":"payer","type":"address"},{"name":"totalAmount","type":"uint64"},{"name":"debtors","type":"(address,uint64,uint64)[]"},{"name":"memo","type":"string"}],"BillKey":[{"name":"groupId","type":"uint64"},{"name":"billId","type":"uint64"}],"Group":[{"name":"admin","type":"address"},{"name":"billCounter","type":"uint64"},{"name":"members","type":"address[]"}]},"methods":[{"name":"create_group","args":[{"type":"address","name":"admin"},{"type":"address[]","name":"members"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"GroupCreated","args":[{"type":"uint64","name":"group_id"}]}],"recommendations":{}},{"name":"create_bill","args":[{"type":"uint64","name":"group_id"},{"type":"address","name":"payer"},{"type":"uint64","name":"total_amount"},{"type":"(address,uint64)[]","name":"debtors"},{"type":"string","name":"memo"},{"type":"(uint64,address,uint64,uint64,uint64)[]","name":"payers_debt"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[{"name":"BillChanged","args":[{"type":"(uint64,uint64)","name":"bill_key","struct":"BillKey"}]}],"recommendations":{}},{"name":"settle_bill","args":[{"type":"uint64","name":"group_id"},{"type":"uint64","name":"bill_id"},{"type":"uint64","name":"sender_index"},{"type":"pay","name":"payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"group_counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z3JvdXBfY291bnRlcg=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"groups":{"keyType":"uint64","valueType":"Group","prefix":"Z3JvdXBz"},"bills":{"keyType":"BillKey","valueType":"Bill","prefix":"YmlsbHM="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[362],"errorMessage":"Admin must be provided"},{"pc":[443],"errorMessage":"At least one debtor must be provided"},{"pc":[654],"errorMessage":"At least one valid debtor must be provided"},{"pc":[356],"errorMessage":"At least two members must be provided"},{"pc":[1148],"errorMessage":"Bill does not exist"},{"pc":[843],"errorMessage":"Bill payer mismatch"},{"pc":[1050],"errorMessage":"Cutoff exceeds new bill obligation"},{"pc":[906],"errorMessage":"Cutoff exceeds pending debt"},{"pc":[1239],"errorMessage":"Debt already paid"},{"pc":[424],"errorMessage":"Group does not exist"},{"pc":[247,288,454,482,486,529,530,562,608,682,809,811,831,836,885,1027,1029,1161,1214,1217],"errorMessage":"Index access is out of bounds"},{"pc":[872,1014],"errorMessage":"Invalid debtor index"},{"pc":[447],"errorMessage":"Memo must be provided"},{"pc":[1035],"errorMessage":"New bill does not contain the payer from netting"},{"pc":[101,132,166],"errorMessage":"OnCompletion is not NoOp"},{"pc":[430],"errorMessage":"Payer must be provided"},{"pc":[1165],"errorMessage":"Payment must be sent to the payer"},{"pc":[826],"errorMessage":"Referenced bill does not exist"},{"pc":[1203],"errorMessage":"Sender index is out of bounds"},{"pc":[1225],"errorMessage":"Sender is not a debtor for this bill"},{"pc":[703],"errorMessage":"Total amount does not match the sum of the debtors' amounts"},{"pc":[435],"errorMessage":"Total amount must be greater than 0"},{"pc":[193],"errorMessage":"can only call when creating"},{"pc":[104,135,169],"errorMessage":"can only call when not creating"},{"pc":[776,829,1154],"errorMessage":"check self.bills entry exists"},{"pc":[211],"errorMessage":"check self.group_counter exists"},{"pc":[453],"errorMessage":"check self.groups entry exists"},{"pc":[123],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAAEwICYGDWdyb3VwX2NvdW50ZXIIAAAAAAAAAAAFYmlsbHMEFR98dQZncm91cHMEd5QKuDEYQAADKCJnMRtBAHWCAwRxgAI1BCZ6Yv4Eq19qEzYaAI4DAEMAIQACIkMxGRREMRhENhoBNhoCNhoDMRYjCUk4ECMSRIgD7SNDMRkURDEYRDYaATYaAjYaAzYaBDYaBTYaBogA9CtMULAjQzEZFEQxGEQ2GgE2GgKIABErTFCwI0MxGUD/ojEYFEQjQ4oCASJJgABJIihlTElPAkQjCChMZ4ACAAGL/lCL/yJZIosHiwYMQQBwi/9XAgCLByULJVhJjAAyAxOLBYwBQQA+iwUiWYwCIowDiwOLAgxBAEOLBVcCAIsDJQslWIsAEkEAKSOLBYwBQAAUiwVXAgCLAFBJFSUKFlcGAkxQjAGLAYwFiwcjCIwHQv+ViwMjCIwDQv+1IkL/y4sFSSJZIw1Ei/4yAxNEi/4pUIACACpQTFCLBBYnBEsBUEm8SE8Cv4AEl0ru6ksBULCMAImKBgEiRwWAAEcEi/oXFicETFBHAr1FAUSL+zIDE0SL/CmlRIv9IllJTgJEi/4VRL5MSU8CRFcgCIACAAAiixCLDAxBALGL/VcCAIsQgSgLgShYSYwBVwAgSYwCMgMTiw+MA0EAVosPIlmMByKMBosGiwcMQQB8iw9XAgCLBiQLJFhXACCLAhJBAF8jiw+MA0AAKYsCi/sTQQAuiw9XAgCLAVcgCIsCTFApUFBJFSQKFlcGAkxQjA+LD4wDiwOMD4sQIwiMEEL/dYsPVwIAiwFXIAiLAksBUExQUEkVJAoWVwYCTFCMD0L/zosGIwiMBkL/fCJC/5WLDyJZSYwIRCKMCiKMEIsQiwgMQQAciw9XAgCLEElOAiQLJFglW4sKCIwKIwiMEEL/3IsKFov8qESL+osOUEmMBYv7i/xQgAIALFCLD0lOAhWBLAgWVwYCUExQi/5QKk8CUEmMAEm8SElPAr+LDUklWyMIFlwgiwtJvEhMv75MjAREi/8iWYwJIowQixCLCQxBAT+L/1cCAIsQSU4CgUALgUBYSVcACIv6TFAqSwFQSb1FAURJvkRJVwAgSwRXCCBMSwESREsEgShbSwKBKFlLA4EqWUsESwJLAlJJIllLBA1ESVcCAE8EJAtMSwEkWEsJJFtLASVbSwKBKFtMSwEJSwIPREsBCBZPAkxcKE8CgQIITwNMTwJdSwUiSwVYSwYVTwdLBU8CUkxLAlBMUE8DTwQJTwIVSwKBKlkITAkWVwYCXCpLA7xITwNMvycFTwNQsE8CgThbiwRJgShZSwGBKllLAksCSwJSSSJZSwUNRElXAgBPBSQLTEsBJFhJVwAgTwgSREmBKFtPBwhLASVbSwEPRBZcKEyBAghMXUsDIksEWEsEFU8FSwRPAlJMSwJQTFBPAk8DCU8CFUsCgSpZCEwJFlcGAlwqjAQjCIwQQv65iwBJvEiLBL8nBYsFULCLDowAiYoEAIv8i/1QKkxQRwK9RQFEvkxJTwJEi/84B0sBVwAgEkSL/hdLAYEoWUlOAk4DSwKBKllJTgRPA08DTwJSSU4CSSJZSwINRFcCAEwkC0lOAiRYRwJXACCL/zgAEkRJJVtMgShbSU4CCUcCRIv/OAhJTwINQQAEiwiMCYsHiwkIFosGTFwoiwWBAgiLBExPAl2LAUkiiwJJTgVYSwEVTwKLA0lOBE8CUkxLA1BMUExPAwlPAhVLAoEqWQhMCRZXBgJcKosASbxITL+J","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[{"name":"GroupCreated","args":[{"type":"uint64","name":"group_id"}]},{"name":"BillChanged","args":[{"type":"(uint64,uint64)","name":"bill_key","struct":"BillKey"}]}],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Bill = {
  payer: string,
  totalAmount: bigint,
  debtors: [string, bigint, bigint][],
  memo: string
}


/**
 * Converts the ABI tuple representation of a Bill to the struct representation
 */
export function BillFromTuple(abiTuple: [string, bigint, [string, bigint, bigint][], string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Bill, APP_SPEC.structs) as Bill
}

export type BillKey = {
  groupId: bigint,
  billId: bigint
}


/**
 * Converts the ABI tuple representation of a BillKey to the struct representation
 */
export function BillKeyFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.BillKey, APP_SPEC.structs) as BillKey
}

export type Group = {
  admin: string,
  billCounter: bigint,
  members: string[]
}


/**
 * Converts the ABI tuple representation of a Group to the struct representation
 */
export function GroupFromTuple(abiTuple: [string, bigint, string[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Group, APP_SPEC.structs) as Group
}

/**
 * The argument types for the Splitrix contract
 */
export type SplitrixArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_group(address,address[])uint64': {
      admin: string
      members: string[]
    }
    'create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64': {
      groupId: bigint | number
      payer: string
      totalAmount: bigint | number
      debtors: [string, bigint | number][]
      memo: string
      payersDebt: [bigint | number, string, bigint | number, bigint | number, bigint | number][]
    }
    'settle_bill(uint64,uint64,uint64,pay)void': {
      groupId: bigint | number
      billId: bigint | number
      senderIndex: bigint | number
      payment: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_group(address,address[])uint64': [admin: string, members: string[]]
    'create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64': [groupId: bigint | number, payer: string, totalAmount: bigint | number, debtors: [string, bigint | number][], memo: string, payersDebt: [bigint | number, string, bigint | number, bigint | number, bigint | number][]]
    'settle_bill(uint64,uint64,uint64,pay)void': [groupId: bigint | number, billId: bigint | number, senderIndex: bigint | number, payment: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type SplitrixReturns = {
  'create_group(address,address[])uint64': bigint
  'create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64': bigint
  'settle_bill(uint64,uint64,uint64,pay)void': void
}

/**
 * Defines the types of available calls and state of the Splitrix smart contract.
 */
export type SplitrixTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_group(address,address[])uint64' | 'create_group', {
      argsObj: SplitrixArgs['obj']['create_group(address,address[])uint64']
      argsTuple: SplitrixArgs['tuple']['create_group(address,address[])uint64']
      returns: SplitrixReturns['create_group(address,address[])uint64']
    }>
    & Record<'create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64' | 'create_bill', {
      argsObj: SplitrixArgs['obj']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']
      argsTuple: SplitrixArgs['tuple']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']
      returns: SplitrixReturns['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']
    }>
    & Record<'settle_bill(uint64,uint64,uint64,pay)void' | 'settle_bill', {
      argsObj: SplitrixArgs['obj']['settle_bill(uint64,uint64,uint64,pay)void']
      argsTuple: SplitrixArgs['tuple']['settle_bill(uint64,uint64,uint64,pay)void']
      returns: SplitrixReturns['settle_bill(uint64,uint64,uint64,pay)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        groupCounter: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        groups: Map<bigint | number, Group>
        bills: Map<BillKey, Bill>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type SplitrixSignatures = keyof SplitrixTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SplitrixNonVoidMethodSignatures = keyof SplitrixTypes['methods'] extends infer T ? T extends keyof SplitrixTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Splitrix smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SplitrixSignatures> = SplitrixTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Splitrix smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SplitrixSignatures> = SplitrixTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = SplitrixTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = SplitrixTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type SplitrixCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type SplitrixDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SplitrixCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Splitrix smart contract
 */
export abstract class SplitrixParamsFactory {
  /**
   * Constructs a no op call for the create_group(address,address[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createGroup(params: CallParams<SplitrixArgs['obj']['create_group(address,address[])uint64'] | SplitrixArgs['tuple']['create_group(address,address[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_group(address,address[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.admin, params.args.members],
    }
  }
  /**
   * Constructs a no op call for the create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBill(params: CallParams<SplitrixArgs['obj']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64'] | SplitrixArgs['tuple']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.groupId, params.args.payer, params.args.totalAmount, params.args.debtors, params.args.memo, params.args.payersDebt],
    }
  }
  /**
   * Constructs a no op call for the settle_bill(uint64,uint64,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static settleBill(params: CallParams<SplitrixArgs['obj']['settle_bill(uint64,uint64,uint64,pay)void'] | SplitrixArgs['tuple']['settle_bill(uint64,uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'settle_bill(uint64,uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.groupId, params.args.billId, params.args.senderIndex, params.args.payment],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Splitrix smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SplitrixFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SplitrixFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SplitrixClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SplitrixClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Splitrix smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SplitrixDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new SplitrixClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Splitrix smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Splitrix smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Splitrix smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new SplitrixClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Splitrix smart contract
 */
export class SplitrixClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SplitrixClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Splitrix app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SplitrixClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SplitrixNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SplitrixClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SplitrixClient> {
    return new SplitrixClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SplitrixClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SplitrixClient> {
    return new SplitrixClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Splitrix smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Splitrix smart contract using the `create_group(address,address[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createGroup: (params: CallParams<SplitrixArgs['obj']['create_group(address,address[])uint64'] | SplitrixArgs['tuple']['create_group(address,address[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SplitrixParamsFactory.createGroup(params))
    },

    /**
     * Makes a call to the Splitrix smart contract using the `create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBill: (params: CallParams<SplitrixArgs['obj']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64'] | SplitrixArgs['tuple']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SplitrixParamsFactory.createBill(params))
    },

    /**
     * Makes a call to the Splitrix smart contract using the `settle_bill(uint64,uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    settleBill: (params: CallParams<SplitrixArgs['obj']['settle_bill(uint64,uint64,uint64,pay)void'] | SplitrixArgs['tuple']['settle_bill(uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SplitrixParamsFactory.settleBill(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Splitrix smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Splitrix smart contract using the `create_group(address,address[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createGroup: (params: CallParams<SplitrixArgs['obj']['create_group(address,address[])uint64'] | SplitrixArgs['tuple']['create_group(address,address[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SplitrixParamsFactory.createGroup(params))
    },

    /**
     * Makes a call to the Splitrix smart contract using the `create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBill: (params: CallParams<SplitrixArgs['obj']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64'] | SplitrixArgs['tuple']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SplitrixParamsFactory.createBill(params))
    },

    /**
     * Makes a call to the Splitrix smart contract using the `settle_bill(uint64,uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    settleBill: (params: CallParams<SplitrixArgs['obj']['settle_bill(uint64,uint64,uint64,pay)void'] | SplitrixArgs['tuple']['settle_bill(uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SplitrixParamsFactory.settleBill(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Splitrix smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Splitrix smart contract using the `create_group(address,address[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createGroup: async (params: CallParams<SplitrixArgs['obj']['create_group(address,address[])uint64'] | SplitrixArgs['tuple']['create_group(address,address[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SplitrixParamsFactory.createGroup(params))
      return {...result, return: result.return as unknown as (undefined | SplitrixReturns['create_group(address,address[])uint64'])}
    },

    /**
     * Makes a call to the Splitrix smart contract using the `create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBill: async (params: CallParams<SplitrixArgs['obj']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64'] | SplitrixArgs['tuple']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SplitrixParamsFactory.createBill(params))
      return {...result, return: result.return as unknown as (undefined | SplitrixReturns['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64'])}
    },

    /**
     * Makes a call to the Splitrix smart contract using the `settle_bill(uint64,uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    settleBill: async (params: CallParams<SplitrixArgs['obj']['settle_bill(uint64,uint64,uint64,pay)void'] | SplitrixArgs['tuple']['settle_bill(uint64,uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SplitrixParamsFactory.settleBill(params))
      return {...result, return: result.return as unknown as (undefined | SplitrixReturns['settle_bill(uint64,uint64,uint64,pay)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SplitrixClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Splitrix app
   */
  state = {
    /**
     * Methods to access global state for the current Splitrix app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          groupCounter: result.group_counter,
        }
      },
      /**
       * Get the current value of the group_counter key in global state
       */
      groupCounter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("group_counter")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Splitrix app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the groups map in box state
       */
      groups: {
        /**
         * Get all current values of the groups map in box state
         */
        getMap: async (): Promise<Map<bigint, Group>> => { return (await this.appClient.state.box.getMap("groups")) as Map<bigint, Group> },
        /**
         * Get a current value of the groups map by key from box state
         */
        value: async (key: bigint | number): Promise<Group | undefined> => { return await this.appClient.state.box.getMapValue("groups", key) as Group | undefined },
      },
      /**
       * Get values from the bills map in box state
       */
      bills: {
        /**
         * Get all current values of the bills map in box state
         */
        getMap: async (): Promise<Map<BillKey, Bill>> => { return (await this.appClient.state.box.getMap("bills")) as Map<BillKey, Bill> },
        /**
         * Get a current value of the bills map by key from box state
         */
        value: async (key: BillKey): Promise<Bill | undefined> => { return await this.appClient.state.box.getMapValue("bills", key) as Bill | undefined },
      },
    },
  }

  public newGroup(): SplitrixComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_group(address,address[])uint64 method call against the Splitrix contract
       */
      createGroup(params: CallParams<SplitrixArgs['obj']['create_group(address,address[])uint64'] | SplitrixArgs['tuple']['create_group(address,address[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createGroup(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_group(address,address[])uint64', v))
        return this
      },
      /**
       * Add a create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64 method call against the Splitrix contract
       */
      createBill(params: CallParams<SplitrixArgs['obj']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64'] | SplitrixArgs['tuple']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBill(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64', v))
        return this
      },
      /**
       * Add a settle_bill(uint64,uint64,uint64,pay)void method call against the Splitrix contract
       */
      settleBill(params: CallParams<SplitrixArgs['obj']['settle_bill(uint64,uint64,uint64,pay)void'] | SplitrixArgs['tuple']['settle_bill(uint64,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.settleBill(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Splitrix contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SplitrixComposer
  }
}
export type SplitrixComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_group(address,address[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGroup(params?: CallParams<SplitrixArgs['obj']['create_group(address,address[])uint64'] | SplitrixArgs['tuple']['create_group(address,address[])uint64']>): SplitrixComposer<[...TReturns, SplitrixReturns['create_group(address,address[])uint64'] | undefined]>

  /**
   * Calls the create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBill(params?: CallParams<SplitrixArgs['obj']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64'] | SplitrixArgs['tuple']['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64']>): SplitrixComposer<[...TReturns, SplitrixReturns['create_bill(uint64,address,uint64,(address,uint64)[],string,(uint64,address,uint64,uint64,uint64)[])uint64'] | undefined]>

  /**
   * Calls the settle_bill(uint64,uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  settleBill(params?: CallParams<SplitrixArgs['obj']['settle_bill(uint64,uint64,uint64,pay)void'] | SplitrixArgs['tuple']['settle_bill(uint64,uint64,uint64,pay)void']>): SplitrixComposer<[...TReturns, SplitrixReturns['settle_bill(uint64,uint64,uint64,pay)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Splitrix smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SplitrixComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SplitrixComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SplitrixComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SplitrixComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SplitrixComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SplitrixComposerResults<TReturns>>
}
export type SplitrixComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

